const express = require('express');
const sequelize = require('./db');
const userRoutes = require('./routes/userRoutes');
const resourceRoutes = require('./routes/resourceRoutes');
const categoryRoutes = require('./routes/categoryRoutes');
const resourceUpdateRoutes = require('./routes/resourceUpdateRoutes');  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
const resourceVisitRoutes = require('./routes/resourceVisitRoutes');  // –ü–æ–¥–∫–ª—é—á–∞–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –≤–∏–∑–∏—Ç–æ–≤

const app = express();
app.use(express.json());

app.use('/api', userRoutes);
app.use('/api', resourceRoutes);
app.use('/api', categoryRoutes);
app.use('/api', resourceUpdateRoutes);  // –†–æ—É—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
app.use('/api', resourceVisitRoutes);  // –†–æ—É—Ç—ã –≤–∏–∑–∏—Ç–æ–≤

app.get('/', (req, res) => {
    res.send('API is working!');
});

const { User, Category, Resource, ResourceUpdate, ResourceVisit } = require('./models');


async function resetDatabase() {
    try {
        // 1Ô∏è‚É£ –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü (CASCADE)
        await sequelize.sync({ force: true });
        console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã (–¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã).');

        // 2Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º USERS —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–æ–ª—è–º–∏
        const users = [
            await User.create({ username: 'alice', email: 'alice@mail.com', password: 'password123', user_type: 'user' }),
            await User.create({ username: 'bob', email: 'bob@mail.com', password: 'password123', user_type: 'resource_owner' }),
            await User.create({ username: 'charlie', email: 'charlie@mail.com', password: 'password123', user_type: 'admin' })
        ];
        for (let i = 4; i <= 10; i++) {
            users.push(await User.create({ username: `user${i}`, email: `user${i}@mail.com`, password: 'password123', user_type: 'user' }));
        }
        console.log('‚úÖ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω–æ.');

        // 3Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º CATEGORIES —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
        const categoryNames = ['Technology', 'Health & Wellness', 'Finance', 'Education', 'Entertainment', 'Sports', 'Travel', 'Food', 'Science', 'Business'];
        const categories = [];
        for (const name of categoryNames) {
            categories.push(await Category.create({ name }));
        }
        console.log('‚úÖ 10 –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–±–∞–≤–ª–µ–Ω–æ.');

        // 4Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º RESOURCES —Å –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        const resourceData = [
            { title: 'TechCrunch', url: 'https://techcrunch.com', description: 'Latest technology news and trends', contact_info: 'contact@techcrunch.com', keywords: ['tech', 'news', 'startups'] },
            { title: 'WebMD', url: 'https://www.webmd.com', description: 'Trusted health and wellness information', contact_info: 'support@webmd.com', keywords: ['health', 'medicine', 'wellness'] },
            { title: 'Investopedia', url: 'https://www.investopedia.com', description: 'Finance and investment education', contact_info: 'help@investopedia.com', keywords: ['finance', 'investment', 'economy'] },
            { title: 'Khan Academy', url: 'https://www.khanacademy.org', description: 'Free education for everyone', contact_info: 'support@khanacademy.org', keywords: ['education', 'learning', 'courses'] },
            { title: 'Netflix', url: 'https://www.netflix.com', description: 'Streaming platform for movies and series', contact_info: 'help@netflix.com', keywords: ['movies', 'series', 'entertainment'] },
            { title: 'ESPN', url: 'https://www.espn.com', description: 'Sports news and live scores', contact_info: 'contact@espn.com', keywords: ['sports', 'news', 'live scores'] },
            { title: 'Lonely Planet', url: 'https://www.lonelyplanet.com', description: 'Travel guides and inspiration', contact_info: 'support@lonelyplanet.com', keywords: ['travel', 'guides', 'adventure'] },
            { title: 'Food Network', url: 'https://www.foodnetwork.com', description: 'Recipes and cooking shows', contact_info: 'help@foodnetwork.com', keywords: ['food', 'cooking', 'recipes'] },
            { title: 'NASA', url: 'https://www.nasa.gov', description: 'Space and science exploration', contact_info: 'info@nasa.gov', keywords: ['space', 'science', 'exploration'] },
            { title: 'Forbes', url: 'https://www.forbes.com', description: 'Business and financial news', contact_info: 'support@forbes.com', keywords: ['business', 'finance', 'news'] }
        ];
        const resources = [];
        for (let i = 0; i < resourceData.length; i++) {
            resources.push(await Resource.create({
                ...resourceData[i],
                last_updated: new Date(),
                category_id: categories[i % categories.length].id,
                owner_id: users[(i + 1) % users.length].id
            }));
        }
        console.log('‚úÖ 10 —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ.');

        // 5Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º RESOURCE_UPDATES
        for (let i = 1; i <= 10; i++) {
            await ResourceUpdate.create({
                resource_id: resources[i % resources.length].id,
                update_description: `Resource update ${i}: Minor fixes and improvements.`
            });
        }
        console.log('‚úÖ 10 –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ.');

        // 6Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω—è–µ–º RESOURCE_VISITS
        for (let i = 1; i <= 10; i++) {
            await ResourceVisit.create({
                user_id: users[i % users.length].id,
                resource_id: resources[i % resources.length].id
            });
        }
        console.log('‚úÖ 10 –ø–æ—Å–µ—â–µ–Ω–∏–π —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω–æ.');

        console.log('üéâ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏!');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–∑—ã:', error);
    } finally {
        await sequelize.close();
    }
}

// resetDatabase();


(async () => {
    try {
        await sequelize.sync();
        console.log('Database synced!');
        app.listen(3000, () => {
            console.log('Server is running on port 3000');
        });
    } catch (error) {
        console.error('Error syncing database:', error);
    }
})();
